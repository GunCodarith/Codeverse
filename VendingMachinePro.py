from typing import Dict, Optional, Tuple
import time
import getpass

# -------------------------------
# Class Product (‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
# -------------------------------
class Product:
    """Represents a product in the vending machine."""

    def __init__(self, name: str, price: int, stock: int):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if not name or not isinstance(name, str):
            raise ValueError("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á")
        if price <= 0:
            raise ValueError("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó")
        if stock < 0:
            raise ValueError("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ")
        self.name = name       # ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.price = price     # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.stock = stock     # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠

    def __str__(self):
        return f"{self.name} - Price: {self.price} Baht - Stock: {self.stock}"

    def is_available(self) -> bool:
        """Check if the product is available in stock."""
        # ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        return self.stock > 0

    def buy(self) -> bool:
        """Attempt to buy one unit of the product."""
        # ‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å 1 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        if self.is_available():
            self.stock -= 1
            return True
        return False


# -------------------------------
# Class CashMgr (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
# -------------------------------
class CashMgr:
    """Manages the cash inside the vending machine."""

    COINS = [1, 2, 5, 10]
    NOTES = [20, 50, 100, 500, 1000]
    DENOMINATIONS = COINS + NOTES

    def __init__(self):
        # dict ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î {denom: count}
        self.cash: Dict[int, int] = {}

    def add(self, denom: int, count: int):
        """Add money to the machine (user insert or admin top-up)."""
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        if denom in self.DENOMINATIONS and count >= 0:
            self.cash[denom] = self.cash.get(denom, 0) + count

    def remove(self, denom: int, count: int):
        """Remove given count of denom from the machine (for making change)."""
        # ‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≠‡∏ô
        if count < 0:
            raise ValueError("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö")
        current = self.cash.get(denom, 0)
        if count > current:
            raise ValueError("‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å")
        self.cash[denom] = current - count

    def snapshot(self) -> Dict[int, int]:
        """Return a copy of current cash state."""
        # ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö transaction/rollback
        return dict(self.cash)

    def restore(self, snap: Dict[int, int]):
        """Restore machine cash to a previous snapshot."""
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.cash = dict(snap)

    def _bounded_min_items_change(self, amt: int, available: Dict[int, int]) -> Optional[Dict[int, int]]:
        """
        Compute change using bounded coin change (minimize number of items),
        respecting available counts. Returns {denom: count} or None if impossible.
        """
        # ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° bounded change ‡πÅ‡∏ö‡∏ö DP: ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç/‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        if amt < 0:
            return None
        if amt == 0:
            return {}

        # dp[a] = dict ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ a ‡∏ö‡∏≤‡∏ó (‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏û‡∏ö)
        dp: list[Optional[Dict[int, int]]] = [None] * (amt + 1)
        dp[0] = {}

        # ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡πÉ‡∏ö/‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç" ‡πÅ‡∏ö‡∏ö bounded
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô available[denom] ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        for denom in sorted(available.keys()):
            count = max(0, int(available.get(denom, 0)))
            for _ in range(count):
                # ‡∏ß‡∏¥‡πà‡∏á‡∏à‡∏≤‡∏Å amt ‡∏•‡∏á‡∏°‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ banknote/coin ‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                for a in range(amt, denom - 1, -1):
                    if dp[a - denom] is not None:
                        prev_combo = dp[a - denom]
                        candidate = dict(prev_combo)
                        candidate[denom] = candidate.get(denom, 0) + 1
                        if dp[a] is None:
                            dp[a] = candidate
                        else:
                            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏£‡∏ß‡∏° (notes+coins) ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠ UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
                            if sum(candidate.values()) < sum(dp[a].values()):
                                dp[a] = candidate

        return dp[amt]

    def can_change(self, amt: int) -> bool:
        """Check if change can be provided with current cash."""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≠‡∏ô" ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if amt < 0:
            return False
        return self._bounded_min_items_change(amt, self.cash) is not None

    def make_change(self, amt: int) -> Optional[Dict[int, int]]:
        """Return and COMMIT the actual change distribution if possible."""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞ "‡∏ï‡∏±‡∏î" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (commit)
        if amt == 0:
            return {}
        combo = self._bounded_min_items_change(amt, self.cash)
        if combo is None:
            return None
        for d, c in combo.items():
            self.remove(d, c)
        return combo

    def show_change(self, change: Dict[int, int]):
        """Display details of the change given."""
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô ‡πÅ‡∏¢‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç/‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        coin_change = {d: c for d, c in change.items() if d in self.COINS}
        note_change = {d: c for d, c in change.items() if d in self.NOTES}

        if note_change:
            print("       üíµ BANKNOTES:")
            for note in sorted(note_change.keys()):
                print(f"          ‚Ä¢ {note} Baht √ó {note_change[note]} notes")
        if coin_change:
            print("       ü™ô COINS:")
            for coin in sorted(coin_change.keys()):
                print(f"          ‚Ä¢ {coin} Baht √ó {coin_change[coin]} coins")


# -------------------------------
# Class FileMgr (‡πÇ‡∏´‡∏•‡∏î/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå)
# -------------------------------
class FileMgr:
    """Handles loading and saving of product and wallet data."""

    @staticmethod
    def load_goods(file: str = "Goods.txt") -> Dict[int, Product]:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .txt ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: num,name,price,stock (‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤)
        products: Dict[int, Product] = {}
        try:
            with open(file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    parts = line.split(',')
                    if len(parts) != 4:
                        continue
                    num, name, price, stock = parts
                    try:
                        slot = int(num)
                        products[slot] = Product(name.strip(), int(price), int(stock))
                    except ValueError:
                        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        continue
        except FileNotFoundError:
            print(f"        ‚ö†Ô∏è  File {file} not found")
        return products

    @staticmethod
    def save_goods(products: Dict[int, Product], file: str = "Goods.txt"):
        # ‡πÄ‡∏ã‡∏ü‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: num,name,price,stock
        with open(file, 'w', encoding='utf-8') as f:
            f.write("# num,name,price,stock\n")
            for num, p in sorted(products.items()):
                f.write(f"{num},{p.name},{p.price},{p.stock}\n")

    @staticmethod
    def load_wallet(file: str = "Wallet.txt") -> Dict[int, int]:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .txt ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: denom,count (‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤)
        cash: Dict[int, int] = {}
        try:
            with open(file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    parts = line.split(',')
                    if len(parts) != 2:
                        continue
                    denom, count = parts
                    try:
                        d = int(denom)
                        c = int(count)
                        if d in CashMgr.DENOMINATIONS and c >= 0:
                            cash[d] = c
                    except ValueError:
                        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        continue
        except FileNotFoundError:
            print(f"        ‚ö†Ô∏è  File {file} not found")
        return cash

    @staticmethod
    def save_wallet(cash: Dict[int, int], file: str = "Wallet.txt"):
        # ‡πÄ‡∏ã‡∏ü‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå .txt ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: denom,count
        with open(file, 'w', encoding='utf-8') as f:
            f.write("# denom,count\n")
            for denom in sorted(cash.keys()):
                f.write(f"{denom},{cash[denom]}\n")


# -------------------------------
# Class VendingMachine (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
# -------------------------------
class VendingMachine:
    """Main vending machine system with shopping and admin features."""

    def __init__(self, password: str = "1234"):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
        self.password = password             # ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ Maintenance
        self.products: Dict[int, Product] = {}
        self.cash_mgr = CashMgr()
        self.load_data()

    # ---------- UI Helpers ----------
    def print_title(self, title: str):
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á
        print("\n")
        print("‚ú®" + "‚ïê" * 58 + "‚ú®")
        print(f"    {title}")
        print("‚ú®" + "‚ïê" * 58 + "‚ú®")

    def loading_animation(self, text: str, duration: float = 1.0):
        # effect ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"\n    üîÑ {text}", end="", flush=True)
        for _ in range(int(duration * 4)):
            print(".", end="", flush=True)
            time.sleep(0.15)
        print(" ‚úÖ Complete!\n")

    # ---------- Persistence ----------
    def load_data(self):
        # ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        self.loading_animation("Loading data from files", 0.8)
        self.products = FileMgr.load_goods()
        self.cash_mgr.cash = FileMgr.load_wallet()

    def save_data(self):
        # ‡πÄ‡∏ã‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏Å‡πá‡∏ö
        self.loading_animation("Saving data to files", 0.5)
        FileMgr.save_goods(self.products)
        FileMgr.save_wallet(self.cash_mgr.cash)

    # ---------- Display ----------
    def show_products(self):
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.print_title("üõçÔ∏è  PRODUCT SHOWCASE  üõçÔ∏è")
        print()
        max_slot = max(self.products.keys(), default=9)
        max_slot = max(max_slot, 9)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 9 ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        for i in range(1, max_slot + 1):
            if i in self.products:
                p = self.products[i]
                status = "‚úÖ Available" if p.is_available() else "‚ùå Out of Stock"
                print(f"      ({i}) {p.name:<20} {p.price:>3}‡∏ø  Qty: {p.stock:>2}  {status}")
            else:
                print(f"      ({i}) {'Empty Slot':<20} ---   Qty: --  üö´ No Product")

        print("\n      (e) üö™ Exit Product Selection")
        print("\n" + "‚îÄ" * 62)

    # ---------- Shopping Flow ----------
    def buy_menu(self):
        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        while True:
            self.show_products()
            choice = input("\n    ‚û§ Enter choice (slot number or 'e'): ").strip().lower()
            if choice == 'e':
                break
            if not choice.isdigit():
                print("\n    ‚ö†Ô∏è Invalid selection (numbers only)")
                continue

            product_num = int(choice)
            if product_num not in self.products:
                print("\n    ‚ö†Ô∏è Slot not configured")
                continue

            if self.process_purchase(self.products[product_num]):
                self.save_data()
                input("\n    üéâ Press Enter to continue...")

    def process_purchase(self, product: Product) -> bool:
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏ö‡∏ö transaction-safe)
        if not product.is_available():
            print("\n    ‚ùå Out of stock")
            return False

        self.print_title("üí≥  PAYMENT TERMINAL  üí≥")
        print(f"    üõçÔ∏è  Selected Product: {product.name}")
        print(f"    üí∞ Price: {product.price} Baht")

        total_paid, inserted_money = self.collect_payment(product.price)
        if total_paid is None:
            # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚Üí ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ)
            return False

        change_amount = total_paid - product.price

        # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°: snapshot ‚Üí add inserted ‚Üí try change ‚Üí commit/rollback
        snap = self.cash_mgr.snapshot()

        # ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        for denom, count in inserted_money.items():
            self.cash_mgr.add(denom, count)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞ "commit" ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
        change_detail: Dict[int, int] = {}
        if change_amount > 0:
            change_detail = self.cash_mgr.make_change(change_amount) or {}

        if change_amount > 0 and not change_detail:
            # ‡∏ó‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí rollback ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            self.cash_mgr.restore(snap)
            print("\n    ‚ùå Transaction failed: no change available")
            print("    üîÅ Refunding inserted money:")
            self.cash_mgr.show_change(inserted_money)  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            return False

        # ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å (commit ‡∏ù‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
        product.buy()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        print("\n    üéâ Purchase successful!")
        print(f"    üì• Paid: {total_paid} Baht")
        print(f"    üí∏ Change: {change_amount} Baht")
        if change_detail:
            self.cash_mgr.show_change(change_detail)
        return True

    def collect_payment(self, price: int) -> Tuple[Optional[int], Optional[Dict[int, int]]]:
        # ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡∏≠‡∏ô‡πÑ‡∏î‡πâ)
        total = 0
        inserted: Dict[int, int] = {}
        valid_money = set(CashMgr.DENOMINATIONS)

        while total < price:
            remaining = price - total
            print(f"\n      üí∞ Current Total: {total} Baht")
            print(f"      üéØ Amount Needed: {remaining} Baht")
            choice = input("\n      ‚û§ Insert money (1,2,5,10,20,50,100,500,1000) or 'c' to cancel: ").strip().lower()

            if choice == 'c':
                print("\n      üö´ Payment cancelled (no money was taken)")
                return None, None

            try:
                amount = int(choice)
                if amount in valid_money:
                    inserted[amount] = inserted.get(amount, 0) + 1
                    total += amount
                else:
                    print("      ‚ùå Invalid denomination")
            except ValueError:
                print("      ‚ö†Ô∏è Numbers only")
        return total, inserted

    # ---------- Maintenance ----------
    def maintenance_menu(self):
        # ‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ getpass ‡πÄ‡∏û‡∏∑‡πà‡∏≠ UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        self.print_title("üîê  SECURE ACCESS  üîê")
        try:
            password = getpass.getpass("    üîë Enter password: ")
        except Exception:
            password = input("    üîë Enter password: ")

        if password != self.password:
            print("\n    ‚ùå ACCESS DENIED")
            return
        print("\n    ‚úÖ ACCESS GRANTED")
        time.sleep(0.5)

        while True:
            self.print_title("‚öôÔ∏è   MAINTENANCE CENTER   ‚öôÔ∏è")
            print("      (g) Setup Products")
            print("      (w) Setup Cash")
            print("      (c) Exit Maintenance")
            choice = input("\n      ‚û§ Select operation: ").strip().lower()
            if choice == 'g':
                self.setup_goods()
            elif choice == 'w':
                self.setup_wallet()
            elif choice == 'c':
                break

    def setup_goods(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°)
        self.products.clear()
        # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏Å‡∏¥‡∏ô 9 ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1-9 ‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
        print("\n      ‚ÑπÔ∏è Leave name empty to skip a slot")
        for i in range(1, 10):
            name = input(f"      ‚û§ Product name for slot {i} (Enter to skip): ").strip()
            if not name:
                continue
            try:
                price = int(input("      ‚û§ Price (>=1 Baht): "))
                stock = int(input("      ‚û§ Initial stock (>=0): "))
                self.products[i] = Product(name, price, stock)
            except ValueError:
                print("      ‚ö†Ô∏è Invalid input, skipping this slot.")
        self.save_data()

    def setup_wallet(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°)
        self.cash_mgr.cash.clear()
        print("\n      ‚ÑπÔ∏è Leave blank for zero")
        for denom in CashMgr.DENOMINATIONS:
            while True:
                raw = input(f"      ‚û§ {denom} Baht count: ").strip()
                if raw == "":
                    self.cash_mgr.cash[denom] = 0
                    break
                try:
                    cnt = int(raw)
                    if cnt < 0:
                        print("      ‚ö†Ô∏è Must be >= 0")
                        continue
                    self.cash_mgr.cash[denom] = cnt
                    break
                except ValueError:
                    print("      ‚ö†Ô∏è Numbers only")
        self.save_data()

    def shutdown(self):
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
        self.print_title("üîê  SYSTEM SHUTDOWN  üîê")
        try:
            password = getpass.getpass("    üîë Enter shutdown password: ")
        except Exception:
            password = input("    üîë Enter shutdown password: ")

        if password == self.password:
            print("\n    ‚úÖ Password accepted")
            for i in range(3, 0, -1):
                print(f"    üîÑ Shutting down in {i}...")
                time.sleep(0.8)
            print("\n    üõë System shutdown complete")
            raise SystemExit(0)
        else:
            print("\n    ‚ùå ACCESS DENIED")

    # ---------- Main Loop ----------
    def run(self):
        # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢
        print("\n")
        print("üåü" + "‚ïê" * 40 + "üåü")
        print()
        print("      üè™  VENDING MACHINE  üè™")
        print("      ‚ú®  Welcome to Shopping  ‚ú®")
        print()
        print("üåü" + "‚ïê" * 40 + "üåü")
        time.sleep(1.0)

        while True:
            self.print_title("üéÆ  MAIN CONTROL PANEL  üéÆ")
            print("\n      üõçÔ∏è  (b) Shopping Center")
            print("      ‚öôÔ∏è  (m) Maintenance Hub")
            print("      üõë (s) Power Down")

            choice = input("\n      ‚û§ Enter your choice (b/m/s): ").strip().lower()
            if choice == 'b':
                self.buy_menu()
            elif choice == 'm':
                self.maintenance_menu()
            elif choice == 's':
                self.shutdown()
            else:
                print("\n    ‚ö†Ô∏è  Invalid selection!")
                time.sleep(1.0)


# -------------------------------
# Main Program
# -------------------------------
if __name__ == "__main__":
    print("üöÄ Starting Vending Machine System...")
    time.sleep(0.5)
    vending_machine = VendingMachine(password="1234")
    vending_machine.run()
